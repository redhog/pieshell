import os
import threading
import getpass
import socket
import pieshell



# Load environment variables from bash
bashsource()

# If we're in a git repo directory: Calculate the current branch and status
def parse_git_branch():
    try:
        ref = str(git("symbolic-ref", "HEAD") | Redirect("stderr", "/dev/null")).strip()
        if ref == "":
            rev = str((git("rev-parse", "HEAD") | sed("-e", "s+^\(.......\).*$+\1+g")) | Redirect("stderr", "/dev/null")).strip()
        if ref == "":
            return ""
        changes=int(str(git("status", "--porcelain") | wc("-l")))
    except pieshell.PipelineFailed:
        return ""
    if changes > 0:
        changes=" +%s" % changes
    else:
        changes=""
    if ref.startswith("refs/heads/"):
        ref = ref[len("refs/heads/"):]
    return "[%s%s]" % (ref, changes)

# Turn /home/MYUSERNAME/foo/bar into ~/foo/bar
def compress_user(path):
    home = os.path.expanduser('~')
    if path.startswith(home):
        path =  "~" + path[len(home):]
    return path

# Define a new prompt "USER@HOST:PATH[GITBRANCH+CHANGES] >>>"

# The prompt_state is used so that debug loggin from pipelines run
# from within the prompt function, won't use the same prompt function
# and recurse endlessly.

prompt_state = threading.local()

old_prompt = pieshell.Environment.__str__
def prompt(self):
    with temporary_env(self):
        if getattr(prompt_state, "in_prompt", False):
            return old_prompt(self)
        prompt_state.in_prompt = True
        last_pipeline = self.last_pipeline
        try:
            return "%s@%s:%s%s >>> " % (getpass.getuser(), socket.gethostname(), compress_user(self._cwd), parse_git_branch())
        finally:
            prompt_state.in_prompt = False
            self.last_pipeline = last_pipeline
    
pieshell.Environment.__str__ = prompt

#kws['ptpython'] = True

# import sys
# if sys.argv[0].startswith('-'):
#   pass
